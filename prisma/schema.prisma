// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  Admin
  User
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String? // You can use gravatar.com to get image profile
  password              String?
  role                  UserRole               @default(User)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  ResumeTemplate        ResumeTemplate[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  userId  String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResumeTemplate {
  id             String           @id @default(cuid())
  name           String // Name of the template (e.g., "Software Engineer Resume")
  description    String? // Optional description of the template
  userId         String
  experiences    Experience[] // A template can have multiple experiences
  ExperienceItem ExperienceItem[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String           @id @default(cuid())
  companyName String // Name of the company
  role        String // Role in the company (e.g., "Software Engineer")
  startDate   DateTime // Start date of the experience
  endDate     DateTime? // End date (optional for ongoing roles)
  items       ExperienceItem[] // An experience can have multiple items
  templateId  String // Foreign key to Template
  template    ResumeTemplate   @relation(fields: [templateId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ExperienceItem {
  id           String                    @id @default(cuid())
  description  String // Description of the item (e.g., "Developed scalable APIs")
  variations   ExperienceItemVariation[] // An item can have multiple variations
  experienceId String // Foreign key to Experience
  templateId   String // Foreign key to Template
  experience   Experience                @relation(fields: [experienceId], references: [id])
  template     ResumeTemplate            @relation(fields: [templateId], references: [id])
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
}

model ExperienceItemVariation {
  id               String         @id @default(cuid())
  content          String // Content of the variation (e.g., "Built RESTful APIs using Node.js")
  experienceItemId String // Foreign key to ExperienceItem
  experienceItem   ExperienceItem @relation(fields: [experienceItemId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
