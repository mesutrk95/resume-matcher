// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  Admin
  User
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String? // You can use gravatar.com to get image profile
  password              String?
  role                  UserRole               @default(User)
  marketingEmails       Boolean                @default(false)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  careerProfile         CareerProfile[]
  job                   Job[]
  JobResume             JobResume[]
  Subscription          Subscription?
  AIUsage               AIUsage[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  userId  String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CareerProfile {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  content     Json?
  design      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  draft       Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum JobStatus {
  BOOKMARKED
  APPLYING
  APPLIED
  INTERVIEWING
  REJECTED
  NO_ANSWER
  CLOSED
  ARCHIVED
}

model Job {
  id             String     @id @default(cuid())
  description    String?
  companyName    String?
  title          String?
  url            String?
  postedAt       DateTime?
  location       String?
  status         JobStatus? @default(BOOKMARKED)
  moreDetails    Json?      @default("{}") @db.Json
  analyzeResults Json?      @default("{}") @db.Json
  createdAt      DateTime   @default(now())
  userId         String

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobResume JobResume[]
}

model JobResume {
  id                  String   @id @default(cuid())
  jobId               String?
  userId              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
  content             Json?
  analyzeResults      Json?    @default("{}") @db.Json
  baseCareerProfileId String?
  design              Json?
  name                String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job? @relation(fields: [jobId], references: [id], onDelete: SetNull)
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

model Subscription {
  id                 String             @id @default(cuid())
  userId             String             @unique
  customerId         String?
  subscriptionId     String?
  priceId            String?
  status             SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIUsage {
  id                 String   @id @default(cuid())
  userId             String
  promptTokens       Int      @default(0)
  completionTokens   Int      @default(0)
  totalTokens        Int      @default(0)
  requestCount       Int      @default(0)
  failedRequestCount Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([createdAt])
}

model AIRateLimit {
  id                String   @id @default(cuid())
  clientId          String   @unique
  clientName        String
  requestsPerMinute Int      @default(5)
  requestsPerHour   Int      @default(60)
  requestsPerDay    Int      @default(700)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model AIRateLimitUsage {
  id           String   @id @default(cuid())
  userId       String
  clientId     String
  requestCount Int      @default(0)
  timestamp    DateTime @default(now())

  @@unique([userId, clientId, timestamp])
  @@index([userId, clientId, timestamp])
  @@index([timestamp])
}
